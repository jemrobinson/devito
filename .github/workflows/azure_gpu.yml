name: Workflow to Create an Azure VM.

on: push

# CONFIGURATION
# For help, go to https://github.com/Azure/Actions

# Set up a service principal using
#
# az login --tenant gerardjgormangmail.onmicrosoft.com
# rg=$(az group create --location uksouth --name GpuCI --query id | xargs)
# az ad sp create-for-rbac --name "http://GpuCI" --role contributor --scopes $rg --sdk-auth
#
# This will output some JSON which you should add to your GitHub repository as a secret called "AZURE_CREDENTIALS"

#
env:
  AZURE_RESOURCE_GROUP: GpuCI        # set this to your Azure Resource group's name
  AZURE_VM_NAME: GpuVM-$GITHUB_SHA   # set this to the name you would like the deployed VM to have
  # AZURE_VM_SIZE: NC6_Promo
  AZURE_VM_SIZE: Standard_DS2_v2     # set this to the Azure VM size you would like to use
  PATH_TO_SCRIPT: $GITHUB_WORKSPACE/.github/scripts/azure_gpu.sh  # path to a script in the GitHub repository you would like to run remotely

jobs:
  build-and-deploy-to-dev:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

   # Authentication
    - uses: azure/login@v1
      with:
        azcliversion: latest
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Provision a new VM
    - name: Azure CLI script to create a new VM
      uses: ResearchSoftwareActions/azure-vm-deploy@master
      id: createvm
      with:
        azure-resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
        azure-vm-name: ${{ env.AZURE_VM_NAME }}
        azure-vm-size: ${{ env.AZURE_VM_SIZE }}

    # Test outputs
    - name: Test outputs
      run: echo "The stdout was ${{ steps.createvm.outputs.stdout }}"


    # # Provision a new VM
    # - name: Azure CLI script to create a new VM
    #   uses: azure/CLI@v1
    #   with:
    #     azcliversion: latest
    #     inlineScript: |
    #       echo "Creating VM"
    #       az vm create --name ${{ env.AZURE_VM_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --image UbuntuLTS --size ${{ env.AZURE_VM_SIZE }} --admin-username gpuciadmin --generate-ssh-keys --ephemeral-os-disk true

    #       echo "Compress the checked-out repository and send this to the newly-created VM"

    #       echo "Running remote script"
    #       chmod a+x $GITHUB_WORKSPACE/.github/scripts/azure_gpu.sh
    #       remote_output=$(az vm run-command invoke --name ${{ env.AZURE_VM_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --command-id RunShellScript --query "value[0].message" --scripts @${{ env.PATH_TO_SCRIPT }} --parameters oh hello world)
    #       echo "$remote_output"
    #       remote_output_without_stderr=${remote_output%%\\n\\n[stderr*}
    #       final_stdout_line=$(echo -e ${remote_output_without_stderr##*stdout]\\n} | tail -n 1)
    #       echo "$final_stdout_line"
    #       if [[ "$final_stdout_line" -ne "SUCCESS" ]]; then set -e o pipefail; fi

    #       echo "Deleting VM: ${{ env.AZURE_VM_NAME }}"
    #       az vm delete --name ${{ env.AZURE_VM_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --yes
    #       echo "Deleting network card: ${{ env.AZURE_VM_NAME }}VMNIC"
    #       az network nic delete --name ${{ env.AZURE_VM_NAME }}VMNIC --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
    #       echo "Deleting public IP address: ${{ env.AZURE_VM_NAME }}PublicIP"
    #       az network public-ip delete --name ${{ env.AZURE_VM_NAME }}PublicIP --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
    #       echo "Deleting network security group: ${{ env.AZURE_VM_NAME }}NSG"
    #       az network nsg delete --name ${{ env.AZURE_VM_NAME }}NSG --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
    #       echo "Deleting virtual network: ${{ env.AZURE_VM_NAME }}VNET"
    #       az network vnet delete --name ${{ env.AZURE_VM_NAME }}VNET --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
